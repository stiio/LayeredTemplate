stages:
  - package-build
  - package-codegen
  - package-deploy

  - web-integration-test
  
  - erc-auth-staging
  - deploy-aws-staging
  - deploy-aws-ecs-staging

package-build:
  stage: package-build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  only:
    - package-release
  artifacts:
    paths:
      - ./spec.yml
  script:
    - cd Web.Mock
    - dotnet restore
    - dotnet tool restore
    - dotnet publish -c Release -o /publish_mock
    - cd /publish_mock
    - dotnet swagger tofile --output ./spec.yml --yaml Web.Mock.dll merged_api_versions

package-codegen:
  stage: package-codegen
  image: openapitools/openapi-generator-cli:v6.2.1
  only:
    - package-release
  dependencies:
    - package-build
  artifacts:
    paths:
      - front/
  script:
    - cd /publish_mock
    - generate -g typescript-fetch -i spec.yml -o /front -c /ts-gen-config.json --global-property skipFormModel=false

package-deploy:
  stage: package-deploy
  image: node:latest
  only:
    - package-release
  script:
    - cd /front
    - ls
    - npm install
    - npm config set '//<BASE_GIT_HOST>/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
    - npm config set '//<BASE_GIT_HOST>/api/v4/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
    - npm config set @npmClientName:registry https://<BASE_GIT_HOST>/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
    - npm run build
    - npm publish




web-integration-test:
  stage: web-integration-test
  image: mcr.microsoft.com/dotnet/sdk:6.0
  only:
    - package-release
    - staging
    - release
  script:
    - cd Web.IntegrationTests
    - dotnet restore
    - dotnet test --verbosity normal -c Release -f net6.0




erc-auth-staging:
  stage: erc-auth-staging
  image: docker:stable
  only:
    - staging
  environment:
    name: npmClientName-staging
  script:
    - apk add --no-cache curl jq bash
    - echo "###################"
    - echo $CI_PROJECT_ID
    - echo "###################"
    - |
        AWS_PASSWORD=$(docker run --rm \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            amazon/aws-cli ecr get-login-password \
            --region $AWS_DEFAULT_REGION)
        ENCODED=$(echo -n "AWS:$AWS_PASSWORD" | base64)
        PAYLOAD=$( jq -n --arg userpass "$ENCODED" '{"auths": {"$AWS_REGISTRY": {"auth": $userpass}}}' )
        echo $PAYLOAD
        curl --request PUT --header "PRIVATE-TOKEN:$REPO_API_TOKEN" "https://<BASE_GIT_HOST>/api/v4/projects/$CI_PROJECT_ID/variables/DOCKER_AUTH_CONFIG" --form "value=$PAYLOAD"

deploy-aws-staging:
  stage: deploy-aws-staging
  image:
    name: cappers/awscli-docker-nodejs    
    entrypoint: [""]
  only:
    - staging
  environment:
    name: npmClientName-staging
  script:
    - cd Web
    - docker build -t $AWS_ECR_TAG .
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_REGISTRY
    - docker push $AWS_ECR_TAG

deploy-aws-ecs-staging:
  stage: deploy-aws-ecs-staging
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  only:
    - staging
  environment:
    name: npmClientName-staging
  script:
    - aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --force-new-deployment