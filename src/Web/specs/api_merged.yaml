openapi: 3.0.1
info:
  title: Merged Api
  version: 1.0.1
paths:
  /api/v1/todo_lists/search:
    post:
      tags:
        - TodoList
      summary: Search TodoList
      operationId: SearchTodoListV1
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListSearchRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TodoListSearchRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TodoListSearchRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListRecordDtoPagedList'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListRecordDtoPagedList'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListRecordDtoPagedList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v1/todo_lists:
    post:
      tags:
        - TodoList
      summary: Create TodoList
      operationId: CreateTodoListV1
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListCreateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TodoListCreateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TodoListCreateRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
    put:
      tags:
        - TodoList
      summary: Update TodoList
      operationId: UpdateTodoListV1
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListUpdateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TodoListUpdateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TodoListUpdateRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  '/api/v1/todo_lists/{todoListId}':
    get:
      tags:
        - TodoList
      summary: Get TodoList by id
      operationId: GetTodoListV1
      parameters:
        - name: todoListId
          in: path
          description: Id of TodoList
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
    delete:
      tags:
        - TodoList
      summary: Delete TodoList
      operationId: DeleteTodoListV1
      parameters:
        - name: todoListId
          in: path
          description: Id of TodoList
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            text/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  '/api/v1/todo_lists/{todoListId}/csv':
    get:
      tags:
        - TodoList
      summary: Get TodoList Csv
      operationId: GetTodoListCsvV1
      parameters:
        - name: todoListId
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v1/users/current_user:
    get:
      tags:
        - User
      summary: Get Current User
      operationId: GetCurrentUserV1
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrentUser'
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
components:
  schemas:
    CurrentUser:
      type: object
      properties:
        id:
          type: string
          description: Id of user
          format: uuid
        email:
          type: string
          description: Email of user
          nullable: true
          example: example@email.com
        name:
          type: string
          description: Name of user
          nullable: true
          example: John Doe
      additionalProperties: false
      description: Current User
    DirectionType:
      enum:
        - Asc
        - Desc
      type: string
      description: Direction Type
    ErrorResult:
      type: object
      properties:
        message:
          type: string
          description: Message
          nullable: true
        traceId:
          type: string
          description: Trace identifier
          nullable: true
      additionalProperties: false
      description: Error Result
    Pagination:
      type: object
      properties:
        page:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: 'Page number (default: 1)'
          format: int32
          nullable: true
          example: 1
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: 'Limit items on page (default: 10)'
          format: int32
          nullable: true
          example: 10
        total:
          type: integer
          description: Total items
          format: int32
          nullable: true
          example: 100
      additionalProperties: false
      description: Pagination
    SearchTodoListFilter:
      type: object
      properties:
        search:
          type: string
          description: Search
          nullable: true
        types:
          type: array
          items:
            $ref: '#/components/schemas/TodoListType'
          description: Types filter
          nullable: true
      additionalProperties: false
      description: SearchTodoListFilter
    Sorting:
      required:
        - column
        - direction
      type: object
      properties:
        column:
          minLength: 1
          type: string
          description: Name of field for sort
        direction:
          $ref: '#/components/schemas/DirectionType'
      additionalProperties: false
      description: Sorting
    SuccessfulResult:
      type: object
      properties:
        message:
          type: string
          description: Message
          nullable: true
      additionalProperties: false
      description: Successful Result
    TodoListCreateRequest:
      required:
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of TodoList
          example: Example Name
        type:
          $ref: '#/components/schemas/TodoListType'
      additionalProperties: false
      description: TodoListCreateRequest
    TodoListDto:
      type: object
      properties:
        id:
          type: string
          description: Id of TodoList
          format: uuid
        name:
          type: string
          description: Name of TodoList
          nullable: true
          example: Example Name
        type:
          $ref: '#/components/schemas/TodoListType'
      additionalProperties: false
      description: TodoListDto
    TodoListRecordDto:
      type: object
      properties:
        id:
          type: string
          description: Id of TodoList
          format: uuid
        userId:
          type: string
          description: Id of User
          format: uuid
        name:
          type: string
          description: Name of TodoList
          nullable: true
        type:
          $ref: '#/components/schemas/TodoListType'
        createdAt:
          type: string
          description: Created At
          format: date-with-time
          example: '2022-11-15T12:00:00.0000000Z'
      additionalProperties: false
      description: TodoList Record
    TodoListRecordDtoPagedList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        data:
          type: array
          items:
            $ref: '#/components/schemas/TodoListRecordDto'
          description: Founded items
          nullable: true
      additionalProperties: false
      description: Paged List
    TodoListSearchRequest:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        filter:
          $ref: '#/components/schemas/SearchTodoListFilter'
        sorting:
          $ref: '#/components/schemas/Sorting'
      additionalProperties: false
      description: Search TodoList Request
    TodoListType:
      enum:
        - Default
        - Specific
      type: string
    TodoListUpdateRequest:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          type: string
          description: Id of TodoList
          format: uuid
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of TodoList
        type:
          $ref: '#/components/schemas/TodoListType'
      additionalProperties: false
      description: UpdateTodoListRequest
  securitySchemes:
    Bearer:
      type: http
      description: Specify the authorization token.
      scheme: bearer
      bearerFormat: JWT