openapi: 3.0.1
info:
  title: Merged Api
  version: 1.0.1
paths:
  /api/v1/example/auth_type:
    get:
      tags:
        - Example
      summary: Get Auth Type
      operationId: GetAuthTypeV1
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
        - ApiKey: [ ]
  /api/v1/todo_lists/search:
    post:
      tags:
        - TodoList
      summary: Search TodoList
      operationId: SearchTodoListV1
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListSearchRequestBody'
          text/json:
            schema:
              $ref: '#/components/schemas/TodoListSearchRequestBody'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TodoListSearchRequestBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListSearchResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListSearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListSearchResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v1/todo_lists:
    post:
      tags:
        - TodoList
      summary: Create TodoList
      operationId: CreateTodoListV1
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListCreateRequestBody'
          text/json:
            schema:
              $ref: '#/components/schemas/TodoListCreateRequestBody'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TodoListCreateRequestBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  '/api/v1/todo_lists/{id}':
    put:
      tags:
        - TodoList
      summary: Update TodoList
      operationId: UpdateTodoListV1
      parameters:
        - name: id
          in: path
          description: Id of TodoList
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListUpdateRequestBody'
          text/json:
            schema:
              $ref: '#/components/schemas/TodoListUpdateRequestBody'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TodoListUpdateRequestBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
    get:
      tags:
        - TodoList
      summary: Get TodoList by id
      operationId: GetTodoListV1
      parameters:
        - name: id
          in: path
          description: Id of TodoList
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TodoListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
    delete:
      tags:
        - TodoList
      summary: Delete TodoList
      operationId: DeleteTodoListV1
      parameters:
        - name: id
          in: path
          description: Id of TodoList
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            text/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  '/api/v1/todo_lists/{id}/csv':
    get:
      tags:
        - TodoList
      summary: Get TodoList Csv
      operationId: GetTodoListCsvV1
      parameters:
        - name: id
          in: path
          description: Id of todoList
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v1/users/current_user:
    get:
      tags:
        - User
      summary: Get Current User
      operationId: GetCurrentUserV1
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrentUser'
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v1/users/email/send_code:
    post:
      tags:
        - User
      summary: Send User Update Email Code
      operationId: SendUserEmailCodeV1
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  maxLength: 255
                  type: string
                  description: Email
                  format: email
                  example: example@email.com
            encoding:
              email:
                style: form
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            text/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v1/users/email/verify_code:
    put:
      tags:
        - User
      summary: Verify User Update Email Code
      operationId: VerifyUserEmailCodeV1
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - code
                - email
              type: object
              properties:
                email:
                  maxLength: 255
                  type: string
                  description: Email
                  format: email
                  example: example@email.com
                code:
                  type: integer
                  description: Code
                  format: int32
                  example: 124567
            encoding:
              email:
                style: form
              code:
                style: form
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
            text/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
  /api/v2/users/current_user:
    get:
      tags:
        - User
      summary: Get Current User
      operationId: GetCurrentUserV2
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrentUser'
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: [ ]
components:
  schemas:
    CurrentUser:
      type: object
      properties:
        id:
          type: string
          description: Id of user
          format: uuid
        email:
          type: string
          description: Email of user
          nullable: true
          example: example@email.com
        emailVerified:
          type: boolean
          description: Email Verified
        phone:
          type: string
          description: Phone of user
          nullable: true
        phoneVerified:
          type: boolean
          description: Phone Verified
        firstName:
          type: string
          description: First Name of user
          nullable: true
          example: John
        lastName:
          type: string
          description: Last Name of user
          nullable: true
          example: Doe
        role:
          $ref: '#/components/schemas/Role'
      additionalProperties: false
      description: Current User
    DirectionType:
      enum:
        - Asc
        - Desc
      type: string
      description: Direction Type
    ErrorResult:
      type: object
      properties:
        message:
          type: string
          description: Message
          nullable: true
        traceId:
          type: string
          description: Trace identifier
          nullable: true
      additionalProperties: false
      description: Error Result
    PaginationRequest:
      required:
        - limit
        - page
      type: object
      properties:
        page:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: 'Page number (default: 1)'
          format: int32
          example: 1
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: 'Limit items on page (default: 10)'
          format: int32
          example: 10
      additionalProperties: false
      description: Pagination Request
    PaginationResponse:
      required:
        - limit
        - page
        - total
      type: object
      properties:
        page:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: 'Page number (default: 1)'
          format: int32
          example: 1
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: 'Limit items on page (default: 10)'
          format: int32
          example: 10
        total:
          type: integer
          description: Total items
          format: int32
          example: 100
      additionalProperties: false
      description: Pagination Response
    Role:
      enum:
        - Guest
        - Admin
        - Client
      type: string
    SortingTodoListRecordDto:
      required:
        - column
        - direction
      type: object
      properties:
        column:
          minLength: 1
          enum:
            - Id
            - UserId
            - User.Email
            - Name
            - Type
            - CreatedAt
          type: string
          description: Name of field for sort
        direction:
          $ref: '#/components/schemas/DirectionType'
      additionalProperties: false
      description: Sorting
    SuccessfulResult:
      type: object
      properties:
        message:
          type: string
          description: Message
          nullable: true
      additionalProperties: false
      description: Successful Result
    TodoListCreateRequestBody:
      required:
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of TodoList
          example: Example Name
        type:
          $ref: '#/components/schemas/TodoListType'
      additionalProperties: false
      description: TodoList Create Request Body
    TodoListDto:
      type: object
      properties:
        id:
          type: string
          description: Id of TodoList
          format: uuid
        name:
          type: string
          description: Name of TodoList
          nullable: true
          example: Example Name
        type:
          $ref: '#/components/schemas/TodoListType'
      additionalProperties: false
      description: TodoListDto
    TodoListRecordDto:
      type: object
      properties:
        id:
          type: string
          description: Id of TodoList
          format: uuid
        userId:
          type: string
          description: Id of User
          format: uuid
        user:
          $ref: '#/components/schemas/UserShortInfo'
        name:
          type: string
          description: Name of TodoList
          nullable: true
        type:
          $ref: '#/components/schemas/TodoListType'
        createdAt:
          type: string
          description: Created At
          format: date-with-time
          example: '2022-11-15T12:00:00.0000000Z'
      additionalProperties: false
      description: TodoList Record
    TodoListRecordDtoFilter:
      type: object
      properties:
        search:
          type: string
          description: Search
          nullable: true
        types:
          type: array
          items:
            $ref: '#/components/schemas/TodoListType'
          description: Types filter
          nullable: true
      additionalProperties: false
      description: TodoListRecordDtoFilter
    TodoListSearchRequestBody:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        sorting:
          $ref: '#/components/schemas/SortingTodoListRecordDto'
        filter:
          $ref: '#/components/schemas/TodoListRecordDtoFilter'
      additionalProperties: false
      description: TodoList Search Request Body
    TodoListSearchResponse:
      required:
        - data
        - pagination
        - sorting
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        sorting:
          $ref: '#/components/schemas/SortingTodoListRecordDto'
        filter:
          $ref: '#/components/schemas/TodoListRecordDtoFilter'
        data:
          type: array
          items:
            $ref: '#/components/schemas/TodoListRecordDto'
          description: Data
      additionalProperties: false
      description: TodoListSearchResponse
    TodoListType:
      enum:
        - Default
        - Specific
      type: string
    TodoListUpdateRequestBody:
      required:
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of TodoList
        type:
          $ref: '#/components/schemas/TodoListType'
      additionalProperties: false
      description: TodoList Update Request Body
    UserShortInfo:
      type: object
      properties:
        id:
          type: string
          description: Id of user
          format: uuid
        email:
          type: string
          description: Email of user
          nullable: true
      additionalProperties: false
      description: User Short Info
  securitySchemes:
    Bearer:
      type: http
      description: Specify the authorization token.
      scheme: Bearer
      bearerFormat: JWT
    ApiKey:
      type: apiKey
      description: Specify the api key.
      name: X-Api-Key
      in: header